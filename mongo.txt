//Create a collection named orders.
db.createCollection('orders');

//Insert at least 3 documents that represent orders. IMPORTANT: See section below for fields. 
//Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
db.orders.insert({orderDate: new ISODate('2017-02-03'), orderTotal: 1, lineItems: [{ unitPrice: 9.00, quantity: 6, productName: 'Light Bulbs' }]});
db.orders.insert({orderDate: new ISODate('2017-04-04'), orderTotal: 2, lineItems: [{ unitPrice: 15.00, quantity: 10, productName: 'Rakes' }]});
db.orders.insert({orderDate: new ISODate('2017-01-02'), orderTotal: 3, lineItems: [{ unitPrice: 21.00, quantity: 15, productName: 'Shovels' }]});

//Find all orders and make them look pretty.
db.orders.find().pretty();

//Find all orders with an orderDate that is after 1/31/2017.
db.orders.find({orderDate:{$gt:new Date('2017-01-31')}});

//Change the orderTotal from 2/3/2017 to 63 dollars 
//(you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.orders.update({_id: ObjectId("599ef50fedd4a1a74f13b959")}, {$set: {orderTotal:63}});

//Add another lineItem to the order from 4/4/2017
db.orders.update({_id: ObjectId("599effdf31b882727cf55207")}, {$push: {'lineItems': {unitPrice: 25, quantity: 3, productName: 'Screwdrivers'}}});

//Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({_id: ObjectId("599effea31b882727cf55208")}, {$set: {'lineItems.0': {unitPrice: 21, quantity: 2, productName: 'transistor radios'}}});

//Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
db.orders.find({$and: [{'lineItems.quantity': {$lt: 10}}, {'lineItems.quantity': {$gt:2}}]});